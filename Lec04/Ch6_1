# Using Base modules.
using Random


# Load a plotting library.
using Plots

# Load the distributions library.
using Distributions

# Load Turing and MCMCChains.
using Turing, MCMCChains

μ0=0
σ0=1/0.001
α0=0.001
β0=0.001
x = [-27.020, 3.570, 8.191, 9.898, 9.603, 9.945, 10.056]


@model seven_scientists1(x) = begin
    # Our prior belief about the probability of heads in a coin.

    μ ~ Normal(μ0, σ0)
    N = length(x)
    l = Vector{Real}(undef, N)
    for j in 1:N
        # Heads or tails of a coin are drawn from a Bernoulli distribution.
        l[j] ~ Gamma(α0,1/β0)
    end
    for j in 1:N
            x[j] ~ Normal(μ, 1/sqrt(l[j]))
    end
end;

@model seven_scientists2(x) = begin
    # Our prior belief about the probability of heads in a coin.

    μ ~ Normal(μ0, σ0)
    N = length(x)
    l = Vector{Real}(undef, N)
    for j in 1:N
        l[j] ~ Uniform(0, 10)
        x[j] ~ Normal(μ, 1/sqrt(l[j]))
    end
    return l;
end;

@model seven_scientists(x) = begin
    # Our prior belief about the probability of heads in a coin.

    μ ~ Normal(μ0, σ0)
    l ~ Gamma(α0,1/β0)

    x ~ Normal(μ, 1/sqrt(l))

end;

# Sampling from the model and indering the posterior distribution

model = seven_scientists1(x)
chain = sample(model, NUTS(0.65), 10000)

display(chain)
plot(chain)

x1 = get(chain, :l)
scient_std=Vector{Real}(undef, N)
for j=1:length(x)
    scient_std[j]=1/sqrt(mean(x1.l[j]))
end
